<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vimtutor Summaries]]></title>
    <url>%2F2019%2F04%2F30%2FVimtutor-Summaries%2F</url>
    <content type="text"><![CDATA[This concludes the Vim Tutor. It was intended to give a brief overview of the Vim editor, just enough to allow you to use the editor fairly easily. It is far from complete as Vim has many many more commands. But unless you are familar with these operations, you won't go further more through Vim. Lesson 1 The cursor is moved using either the arrow keys or the hjkl keys. To start Vim from the shell prompt type: vim FILENAME &lt;ENTER&gt; To exit Vim type: &lt;ESC&gt; :q! &lt;ENTER&gt; to trash all changes. OR type: &lt;ESC&gt; :wq &lt;ENTER&gt; to save the changes. To delete the character at the cursor type: x To insert or append text type: i type inserted text &lt;ESC&gt; insert before the cursor A type appended text &lt;ESC&gt; append after the line NOTE: Pressing &lt;ESC&gt; will place you in Normal mode or will cancel an unwanted and partially completed command. Lesson 2 To delete from the cursor up to the next word type: dw To delete from the cursor to the end of a line type: d$ To delete a whole line type: dd To repeat a motion prepend it with a number: 2w The format for a change command is: operator [number] motion where: operator - is what to do, such as d for delete [number] - is an optional count to repeat the motion motion - moves over the text to operate on, such as w (word), $ (to the end of line), etc. To move to the start of the line use a zero: 0 To undo previous actions, type: u (lowercase u) To undo all the changes on a line, type: U (capital U) To undo the undo's, type: CTRL-R Lesson 3 To put back text that has just been deleted, type p . This puts the deleted text AFTER the cursor (if a line was deleted it will go on the line below the cursor). To replace the character under the cursor, type r and then the character you want to have there. The change operator allows you to change from the cursor to where the motion takes you. eg. Type ce to change from the cursor to the end of the word, c$ to change to the end of a line. The format for change is: c [number] motion Lesson 4 CTRL-G displays your location in the file and the file status. G moves to the end of the file. number G moves to that line number. gg moves to the first line. Typing / followed by a phrase searches FORWARD for the phrase. Typing ? followed by a phrase searches BACKWARD for the phrase. After a search type n to find the next occurrence in the same direction or N to search in the opposite direction. CTRL-O takes you back to older positions, CTRL-I to newer positions. Typing % while the cursor is on a (,),[,],{, or } goes to its match. To substitute new for the first old in a line type :s/old/new To substitute new for all 'old's on a line type :s/old/new/g To substitute phrases between two line #'s type :#,#s/old/new/g To substitute all occurrences in the file type :%s/old/new/g To ask for confirmation each time add 'c' :%s/old/new/gc Lesson 5 :!command executes an external command. Some useful examples are: (Windows) (Unix) :!dir :!ls shows a directory listing. :!del FILENAME :!rm FILENAME removes file FILENAME. :w FILENAME writes the current Vim file to disk with name FILENAME. v motion :w FILENAME saves the Visually selected lines in file FILENAME. :r FILENAME retrieves disk file FILENAME and puts it below the cursor position. :r !dir reads the output of the dir command and puts it below the cursor position.]]></content>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Github 搭建备份博客]]></title>
    <url>%2F2019%2F04%2F27%2FHexo-Github-%E6%90%AD%E5%BB%BA%E5%A4%87%E4%BB%BD%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本篇先咕咕咕啦]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fcitx添加词库]]></title>
    <url>%2F2019%2F04%2F27%2FFcitx%E6%B7%BB%E5%8A%A0%E8%AF%8D%E5%BA%93%2F</url>
    <content type="text"><![CDATA[前言 作为全球最大的Linux开源输入法，fcitx保持了一贯的高效、简捷。 fcitx官方给出了原生生成细胞词库的接口，以适应中文输入中专有、常用语句的拼写。 本文将介绍怎样转换、导入狗细胞词库到fcitx的拼音词库中。 安装 安装脚本我已上传至 github 安装方法附在 README.md中 首先到搜狗细胞词库下载你需要用到的词库，到~/Downloads/目录下 然后，clone我上传好的文件和脚本 1$ git clone https://github.com/AlessandroChen/fcitx-pinyin-lexicon.git 你可以使用fcitx-pinyin-lexicon下的install.sh直接进行安装(强烈推荐)，也可以按照以下步骤逐步完成： 12345678910111213$ cd fcitx-pinyin-lexicon$ mkdir tmp &amp;&amp; cd tmp$ mv ~/Downloads/*.scel ./# 转换为 org 文件$ mkdir org$ for i in *.scel; do scel2org $i -o org/$i.org; done$ cp ../pyPhrase.org org/# 生成词库$ mkdir dict &amp;&amp; cd dict$ cat ../org/* | sort | uniq &gt; ultimate.org$ createPYMB ../../gbkpy.org ultimate.org 转换过程可能比较长，耐心等待。最后会生成如下几个文件： pyERROR 词库中重复或有问题的条目 pyPhrase.ok 除错后的org词库文件 pyphrase.mb 最终词库 pybase.mb 配套的字码库 下面将词库放在 fcitx 的目录下，然后重启 fcitx 就完成了 12$ mv pyphrase.mb ~/.config/fcitx/pinyin/$ mv pybase.mb ~/.config/fcitx/pinyin/]]></content>
      <categories>
        <category>应用程序</category>
      </categories>
      <tags>
        <tag>fcitx</tag>
      </tags>
  </entry>
</search>
